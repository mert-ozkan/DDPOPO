%%
clear all
close all
dr = '/Users/mertozkan/Documents/MATLAB/DD/DDPOPO/data/MOz';

%function analys_ddpopo(dr)
op = concatenate_files(dr);
[isOk, pc_ok] = accuracy(op);
trl = mark_trials(op(:,3),isOk);


rxn_t = str2num(char(op(:,6)));

rt.ill = [rxn_t(trl.rep.ill), rxn_t(trl.prev.ill)];
rt.phys = [rxn_t(trl.rep.phys), rxn_t(trl.prev.phys)];
rt.both = [rxn_t(trl.rep.both), rxn_t(trl.prev.both)];
rt.pos = [rxn_t(trl.rep.pos), rxn_t(trl.prev.pos)];

figure

condX = fieldnames(rt);
for idx = 1:length(condX)
    rt.stats.(condX{idx})(:,1) = mean(rt.(condX{idx}));
    rt.stats.(condX{idx})(:,2) = std(rt.(condX{idx}))/sqrt(length(rt.(condX{idx})));
    [hN,pN] = ttest(rt.(condX{idx})(:,1),rt.(condX{idx})(:,2));
    rt.stats.p.(condX{idx}) = [pN, hN];
    
    errorbar(1:2,rt.stats.(condX{idx})(:,1), rt.stats.(condX{idx})(:,2));
    hold on
end

ax = gca;
ax.XLim = [.5, 2.5];
ax.XTick = [1, 2];
ax.XTickLabel = {'repeated', 'previous'};
legend(ax, {'ill', 'phys', 'both', 'prev'});



% end
%%
function trl = mark_trials(cryp,isOk)
rep = char(cryp);
isRepIll = str2num(rep(:,1)) & isOk;
isRepPhys = str2num(rep(:,2)) & isOk;
isRepPos = str2num(rep(:,8)) & isOk;

isRepStim = isRepIll & isRepPhys;
isRepIll = isRepIll & ~isRepStim;
isRepPhys = isRepPhys & ~isRepStim;

isRepTrl = table(isRepIll, isRepPhys, isRepStim, isRepPos,'VariableNames',{'ill','phys', 'both','pos'});
isPrevTrl = ones(length(isOk),3)&false;
isPrevTrl(find(isRepIll)-1,1) = true;
isPrevTrl(find(isRepPhys)-1,2) = true;
isPrevTrl(find(isRepStim)-1,3) = true;
isPrevTrl(find(isRepPos)-1,4) = true;
isPrevTrl = array2table(isPrevTrl,'VariableNames',{'ill','phys', 'both', 'pos'});

trl.rep = isRepTrl;
trl.prev = isPrevTrl;
end
%%
function op = concatenate_files(dr)
f_nmX = struct2table(dir(dr));
f_nmX = f_nmX.name(3:end);

op = [];
for idx = 1:length(f_nmX)
    f_nm = f_nmX{idx};
    opN = imp_ddpopo(f_nm);
    op = [op; opN];
end
end
%%
function op = imp_ddpopo(filename, startRow, endRow)
%IMPORTFILE Import numeric data from a text file as a matrix.
%   DDPOPOMOZTRLSQNO16BLKNO717JUL2019142222 = IMPORTFILE(FILENAME) Reads
%   data from text file FILENAME for the default selection.
%
%   DDPOPOMOZTRLSQNO16BLKNO717JUL2019142222 = IMPORTFILE(FILENAME,
%   STARTROW, ENDROW) Reads data from rows STARTROW through ENDROW of text
%   file FILENAME.
%
% Example:
%   DDPOPOMOzTrlSqNo16BlkNo717Jul2019142222 = importfile('DDPOPO_MOz_TrlSqNo16_BlkNo7_17Jul2019_142222', 2, 32);
%
%    See also TEXTSCAN.

% Auto-generated by MATLAB on 2019/07/17 16:34:40

%% Initialize variables.
delimiter = ',';
if nargin<=2
    startRow = 2;
    endRow = inf;
end

%% Format for each line of text:
%   column1: text (%s)
%	column2: text (%s)
%   column3: text (%s)
%	column4: text (%s)
%   column5: text (%s)
%	column6: text (%s)
%   column7: text (%s)
%	column8: text (%s)
%   column9: text (%s)
%	column10: text (%s)
%   column11: text (%s)
%	column12: text (%s)
%   column13: text (%s)
%	column14: text (%s)
% For more information, see the TEXTSCAN documentation.
formatSpec = '%s%s%s%s%s%s%s%s%s%s%s%s%s%s%[^\n\r]';

%% Open the text file.
fileID = fopen(filename,'r');

%% Read columns of data according to the format.
% This call is based on the structure of the file used to generate this
% code. If an error occurs for a different file, try regenerating the code
% from the Import Tool.
dataArray = textscan(fileID, formatSpec, endRow(1)-startRow(1)+1, 'Delimiter', delimiter, 'TextType', 'string', 'HeaderLines', startRow(1)-1, 'ReturnOnError', false, 'EndOfLine', '\r\n');
for block=2:length(startRow)
    frewind(fileID);
    dataArrayBlock = textscan(fileID, formatSpec, endRow(block)-startRow(block)+1, 'Delimiter', delimiter, 'TextType', 'string', 'HeaderLines', startRow(block)-1, 'ReturnOnError', false, 'EndOfLine', '\r\n');
    for col=1:length(dataArray)
        dataArray{col} = [dataArray{col};dataArrayBlock{col}];
    end
end

%% Close the text file.
fclose(fileID);

%% Post processing for unimportable data.
% No unimportable data rules were applied during the import, so no post
% processing code is included. To generate code which works for
% unimportable data, select unimportable cells in a file and regenerate the
% script.

%% Create output variable
op = [dataArray{1:end-1}];

end
%%
function [isOk, pc_ok] = accuracy(op)
isOk = strcmp(op(:,4),op(:,5));
pc_ok = sum(isOk)*100/length(isOk);
end
